'use strict';

var fs = require('fs');
var semver = require('semver');
var execa = require('execa');
var del = require('del');
var pify = require('pify');
var Listr = require('listr');
var split = require('split');
require('any-observable/register/rxjs-all');
var Observable = require('any-observable');
var streamToObservable = require('stream-to-observable');
var xml2js = require('xml2js');
var path = require('path');

var fsP = pify(fs);
var oldVersion = null;

var exec = function exec(cmd, args) {
  // Use `Observable` support if merged https://github.com/sindresorhus/execa/pull/26
  var cp = execa(cmd, args);

  return Observable.merge(streamToObservable(cp.stdout.pipe(split()), { await: cp }), streamToObservable(cp.stderr.pipe(split()), { await: cp })).filter(Boolean);
};

var gitTasks = function gitTasks(opts) {
  var tasks = [{
    title: 'Check current branch',
    task: function task() {
      return execa.stdout('git', ['symbolic-ref', '--short', 'HEAD']).then(function (branch) {
        if (branch !== 'master') {
          throw new Error('Not on `master` branch. Use --any-branch to publish anyway.');
        }
      });
    }
  }, {
    title: 'Check local working tree',
    task: function task() {
      return execa.stdout('git', ['status', '--porcelain']).then(function (status) {
        if (status !== '') {
          throw new Error('Unclean working tree. Commit or stash changes first.');
        }
      });
    }
  }, {
    title: 'Fetch remote changes',
    task: function task() {
      return execa('git', ['fetch']);
    }
  }, {
    title: 'Check remote history',
    task: function task() {
      return execa.stdout('git', ['rev-list', '--count', '--left-only', '@{u}...HEAD']).then(function (result) {
        if (result !== '0') {
          throw new Error('Remote history differ. Please pull changes.');
        }
      });
    }
  }];

  if (opts.anyBranch) {
    tasks.shift();
  }

  return new Listr(tasks);
};

var pluginTasks = function pluginTasks(version) {
  var commitMsg = 'Bumping plugin version to ' + version;
  var tasks = [{
    title: 'Update plugin.xml',
    task: function task() {
      return updatePluginXml(version);
    }
  }, {
    title: 'Stage plugin.xml',
    task: function task() {
      return exec('git', ['add', 'plugin.xml']);
    }
  }, {
    title: 'Commit plugin.xml',
    task: function task() {
      return exec('git', ['commit', '-m', commitMsg]);
    }
  }];

  return new Listr(tasks);
};

var updatePluginXml = function updatePluginXml(version) {
  return new Promise(function (resolve, reject) {
    var parser = new xml2js.Parser();
    var pluginPath = path.resolve('./');
    console.log(pluginPath + '/plugin.xml');
    fs.readFile(pluginPath + '/plugin.xml', function (err, data) {
      if (err) {
        console.error(err);
        reject();
      };

      parser.parseString(data, function (err, result) {
        oldVersion = result.plugin.$.version;
        result.plugin.$.version = version;

        var builder = new xml2js.Builder();
        var xml = builder.buildObject(result);

        fs.writeFile('plugin.xml', xml, function (err) {
          if (err) {
            console.error(err);
            reject();
          }
          resolve();
        });
      });
    });
  });
};

var generateChangelog = function generateChangelog(version) {
  console.log(oldVersion);
  var commitMsg = 'Updating CHANGELOG';
  var tasks = [{
    title: 'Update CHANGELOG.md',
    task: function task() {
      return updateChangelog(version);
    }
  }, {
    title: 'Stage CHANGELOG.md',
    task: function task() {
      return exec('git', ['add', 'CHANGELOG.md']);
    }
  }, {
    title: 'Commit CHANGELOG.md',
    task: function task() {
      return exec('git', ['commit', '-m', commitMsg]);
    }
  }, {
    title: 'Push CHANGELOG.md',
    task: function task() {
      return exec('git', ['push', 'origin', 'master']);
    }
  }];
  return new Listr(tasks);
};

var updateChangelog = function updateChangelog(version) {
  return new Promise(function (resolve, reject) {
    var pluginPath = path.resolve('./');
    console.log(pluginPath + '/CHANGELOG.md');
    fs.readFile(pluginPath + '/CHANGELOG.md', 'utf-8', function (err, data) {
      if (data) {
        data = data.substring(data.indexOf('##'));
      }

      var fetchURL = "Fetch URL";
      execa.stdout('git', ['remote', 'show', 'origin', '-n']).then(function (gitUrl) {
        var begin = gitUrl.indexOf('Fetch URL: https://github.com/') + 30;
        var end = gitUrl.indexOf('.git', begin);
        var orgRepo = gitUrl.substring(begin, end);
        var versions = 'v' + oldVersion + '...v' + version;
        var prettyFormat = '--pretty=format:- %s [view commit](http://github.com/' + orgRepo + '/commit/%H)';
        execa.stdout('git', ['log', versions, prettyFormat]).then(function (result) {
          var changelogData = '# Change Log\n\n## [v' + version + '](https://github.com/' + orgRepo + '/tree/v' + version + ') (2016-07-09)\n[Full Changelog](https://github.com/' + orgRepo + '/compare/' + versions + ')\n\n' + result + '\n\n' + data;
          fs.writeFile('CHANGELOG.md', changelogData, function (err) {
            if (err) {
              console.error(err);
              reject();
            }
            resolve();
          });
        }).catch(function (error) {
          console.error(err);
          reject();
        });
      });
    });
  });
};

module.exports = function (input, opts) {
  input = input || '';
  opts = opts || {};

  var runTests = !opts.yolo;
  var runCleanup = !opts.skipCleanup && !opts.yolo;

  if (!semver.valid(input)) {
    return Promise.reject(new Error('Version should be a valid semver version.'));
  }

  if (semver.gte(process.version, '6.0.0')) {
    return Promise.reject(new Error('You should not publish when running Node.js 6. Please downgrade and publish again. https://github.com/npm/npm/issues/5082'));
  }

  var tasks = new Listr([{
    title: 'Git',
    task: function task() {
      return gitTasks(opts);
    }
  }]);

  if (runCleanup) {
    tasks.add([{
      title: 'Cleanup',
      task: function task() {
        return del('node_modules');
      }
    }, {
      title: 'Installing dependencies',
      task: function task() {
        return exec('npm', ['install']);
      }
    }]);
  }

  if (runTests) {
    tasks.add({
      title: 'Running tests',
      task: function task() {
        return exec('npm', ['test']);
      }
    });
  }

  tasks.add([{
    title: 'plugin.xml',
    task: function task() {
      return pluginTasks(input);
    }
  }, {
    title: 'Bumping version',
    task: function task() {
      return exec('npm', ['version', input]);
    }
  }, {
    title: 'Publishing package',
    task: function task() {
      return exec('npm', ['publish']);
    }
  }, {
    title: 'Pushing tags',
    task: function task() {
      return exec('git', ['push', '--follow-tags']);
    }
  }, {
    title: 'Generate CHANGELOG',
    task: function task() {
      return generateChangelog(input);
    }
  }]);

  return tasks.run().then(function () {
    return fsP.readFile('package.json', 'utf8');
  }).then(JSON.parse);
};